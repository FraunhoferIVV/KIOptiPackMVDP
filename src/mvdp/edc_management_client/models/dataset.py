# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist
from mvdp.edc_management_client.models.distribution import Distribution
from mvdp.edc_management_client.models.policy import Policy

class Dataset(BaseModel):
    """
    Dataset
    """
    distributions: Optional[conlist(Distribution)] = None
    id: Optional[StrictStr] = None
    offers: Optional[Dict[str, Policy]] = None
    properties: Optional[Dict[str, Dict[str, Any]]] = None
    __properties = ["distributions", "id", "offers", "properties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dataset:
        """Create an instance of Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in distributions (list)
        _items = []
        if self.distributions:
            for _item in self.distributions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['distributions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in offers (dict)
        _field_dict = {}
        if self.offers:
            for _key in self.offers:
                if self.offers[_key]:
                    _field_dict[_key] = self.offers[_key].to_dict()
            _dict['offers'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dataset:
        """Create an instance of Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dataset.parse_obj(obj)

        _obj = Dataset.parse_obj({
            "distributions": [Distribution.from_dict(_item) for _item in obj.get("distributions")] if obj.get("distributions") is not None else None,
            "id": obj.get("id"),
            "offers": dict(
                (_k, Policy.from_dict(_v))
                for _k, _v in obj.get("offers").items()
            )
            if obj.get("offers") is not None
            else None,
            "properties": obj.get("properties")
        })
        return _obj

