# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from mvdp.edc_management_client.models.query_spec_dto import QuerySpecDto

class CatalogRequestDto(BaseModel):
    """
    CatalogRequestDto
    """
    context: Optional[Dict[str, Any]] = Field(None, alias="@context")
    type: Optional[StrictStr] = Field(None, alias="@type")
    protocol: Optional[StrictStr] = None
    provider_url: StrictStr = Field(..., alias="providerUrl")
    query_spec: Optional[QuerySpecDto] = Field(None, alias="querySpec")
    __properties = ["@context", "@type", "protocol", "providerUrl", "querySpec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CatalogRequestDto:
        """Create an instance of CatalogRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query_spec
        if self.query_spec:
            _dict['querySpec'] = self.query_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CatalogRequestDto:
        """Create an instance of CatalogRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CatalogRequestDto.parse_obj(obj)

        _obj = CatalogRequestDto.parse_obj({
            "context": obj.get("@context"),
            "type": obj.get("@type"),
            "protocol": obj.get("protocol"),
            "provider_url": obj.get("providerUrl"),
            "query_spec": QuerySpecDto.from_dict(obj.get("querySpec")) if obj.get("querySpec") is not None else None
        })
        return _obj

