# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CatalogRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider_url': 'str',
        'query_spec': 'QuerySpecDto'
    }

    attribute_map = {
        'provider_url': 'providerUrl',
        'query_spec': 'querySpec'
    }

    def __init__(self, provider_url=None, query_spec=None):  # noqa: E501
        """CatalogRequestDto - a model defined in Swagger"""  # noqa: E501
        self._provider_url = None
        self._query_spec = None
        self.discriminator = None
        self.provider_url = provider_url
        if query_spec is not None:
            self.query_spec = query_spec

    @property
    def provider_url(self):
        """Gets the provider_url of this CatalogRequestDto.  # noqa: E501


        :return: The provider_url of this CatalogRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._provider_url

    @provider_url.setter
    def provider_url(self, provider_url):
        """Sets the provider_url of this CatalogRequestDto.


        :param provider_url: The provider_url of this CatalogRequestDto.  # noqa: E501
        :type: str
        """
        if provider_url is None:
            raise ValueError("Invalid value for `provider_url`, must not be `None`")  # noqa: E501

        self._provider_url = provider_url

    @property
    def query_spec(self):
        """Gets the query_spec of this CatalogRequestDto.  # noqa: E501


        :return: The query_spec of this CatalogRequestDto.  # noqa: E501
        :rtype: QuerySpecDto
        """
        return self._query_spec

    @query_spec.setter
    def query_spec(self, query_spec):
        """Sets the query_spec of this CatalogRequestDto.


        :param query_spec: The query_spec of this CatalogRequestDto.  # noqa: E501
        :type: QuerySpecDto
        """

        self._query_spec = query_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
