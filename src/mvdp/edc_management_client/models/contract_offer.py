# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContractOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'Asset',
        'consumer': 'str',
        'contract_end': 'datetime',
        'contract_start': 'datetime',
        'id': 'str',
        'offer_end': 'datetime',
        'offer_start': 'datetime',
        'policy': 'Policy',
        'provider': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'consumer': 'consumer',
        'contract_end': 'contractEnd',
        'contract_start': 'contractStart',
        'id': 'id',
        'offer_end': 'offerEnd',
        'offer_start': 'offerStart',
        'policy': 'policy',
        'provider': 'provider'
    }

    def __init__(self, asset=None, consumer=None, contract_end=None, contract_start=None, id=None, offer_end=None,
                 offer_start=None, policy=None, provider=None):  # noqa: E501
        """ContractOffer - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._consumer = None
        self._contract_end = None
        self._contract_start = None
        self._id = None
        self._offer_end = None
        self._offer_start = None
        self._policy = None
        self._provider = None
        self.discriminator = None
        if asset is not None:
            self.asset = asset
        if consumer is not None:
            self.consumer = consumer
        if contract_end is not None:
            self.contract_end = contract_end
        if contract_start is not None:
            self.contract_start = contract_start
        if id is not None:
            self.id = id
        if offer_end is not None:
            self.offer_end = offer_end
        if offer_start is not None:
            self.offer_start = offer_start
        if policy is not None:
            self.policy = policy
        if provider is not None:
            self.provider = provider

    @property
    def asset(self):
        """Gets the asset of this ContractOffer.  # noqa: E501


        :return: The asset of this ContractOffer.  # noqa: E501
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this ContractOffer.


        :param asset: The asset of this ContractOffer.  # noqa: E501
        :type: Asset
        """

        self._asset = asset

    @property
    def consumer(self):
        """Gets the consumer of this ContractOffer.  # noqa: E501


        :return: The consumer of this ContractOffer.  # noqa: E501
        :rtype: str
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this ContractOffer.


        :param consumer: The consumer of this ContractOffer.  # noqa: E501
        :type: str
        """

        self._consumer = consumer

    @property
    def contract_end(self):
        """Gets the contract_end of this ContractOffer.  # noqa: E501


        :return: The contract_end of this ContractOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_end

    @contract_end.setter
    def contract_end(self, contract_end):
        """Sets the contract_end of this ContractOffer.


        :param contract_end: The contract_end of this ContractOffer.  # noqa: E501
        :type: datetime
        """

        self._contract_end = contract_end

    @property
    def contract_start(self):
        """Gets the contract_start of this ContractOffer.  # noqa: E501


        :return: The contract_start of this ContractOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_start

    @contract_start.setter
    def contract_start(self, contract_start):
        """Sets the contract_start of this ContractOffer.


        :param contract_start: The contract_start of this ContractOffer.  # noqa: E501
        :type: datetime
        """

        self._contract_start = contract_start

    @property
    def id(self):
        """Gets the id of this ContractOffer.  # noqa: E501


        :return: The id of this ContractOffer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractOffer.


        :param id: The id of this ContractOffer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def offer_end(self):
        """Gets the offer_end of this ContractOffer.  # noqa: E501


        :return: The offer_end of this ContractOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_end

    @offer_end.setter
    def offer_end(self, offer_end):
        """Sets the offer_end of this ContractOffer.


        :param offer_end: The offer_end of this ContractOffer.  # noqa: E501
        :type: datetime
        """

        self._offer_end = offer_end

    @property
    def offer_start(self):
        """Gets the offer_start of this ContractOffer.  # noqa: E501


        :return: The offer_start of this ContractOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_start

    @offer_start.setter
    def offer_start(self, offer_start):
        """Sets the offer_start of this ContractOffer.


        :param offer_start: The offer_start of this ContractOffer.  # noqa: E501
        :type: datetime
        """

        self._offer_start = offer_start

    @property
    def policy(self):
        """Gets the policy of this ContractOffer.  # noqa: E501


        :return: The policy of this ContractOffer.  # noqa: E501
        :rtype: Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ContractOffer.


        :param policy: The policy of this ContractOffer.  # noqa: E501
        :type: Policy
        """

        self._policy = policy

    @property
    def provider(self):
        """Gets the provider of this ContractOffer.  # noqa: E501


        :return: The provider of this ContractOffer.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ContractOffer.


        :param provider: The provider of this ContractOffer.  # noqa: E501
        :type: str
        """

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
