# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from mvdp.edc_management_client.models.data_address import DataAddress

class DataFlowRequest(BaseModel):
    """
    DataFlowRequest
    """
    callback_address: Optional[StrictStr] = Field(None, alias="callbackAddress")
    destination_data_address: Optional[DataAddress] = Field(None, alias="destinationDataAddress")
    id: Optional[StrictStr] = None
    process_id: Optional[StrictStr] = Field(None, alias="processId")
    properties: Optional[Dict[str, StrictStr]] = None
    source_data_address: Optional[DataAddress] = Field(None, alias="sourceDataAddress")
    trace_context: Optional[Dict[str, StrictStr]] = Field(None, alias="traceContext")
    trackable: Optional[StrictBool] = None
    __properties = ["callbackAddress", "destinationDataAddress", "id", "processId", "properties", "sourceDataAddress", "traceContext", "trackable"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataFlowRequest:
        """Create an instance of DataFlowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of destination_data_address
        if self.destination_data_address:
            _dict['destinationDataAddress'] = self.destination_data_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_data_address
        if self.source_data_address:
            _dict['sourceDataAddress'] = self.source_data_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataFlowRequest:
        """Create an instance of DataFlowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataFlowRequest.parse_obj(obj)

        _obj = DataFlowRequest.parse_obj({
            "callback_address": obj.get("callbackAddress"),
            "destination_data_address": DataAddress.from_dict(obj.get("destinationDataAddress")) if obj.get("destinationDataAddress") is not None else None,
            "id": obj.get("id"),
            "process_id": obj.get("processId"),
            "properties": obj.get("properties"),
            "source_data_address": DataAddress.from_dict(obj.get("sourceDataAddress")) if obj.get("sourceDataAddress") is not None else None,
            "trace_context": obj.get("traceContext"),
            "trackable": obj.get("trackable")
        })
        return _obj

