# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from mvdp.edc_management_client.models.contract_offer import ContractOffer
from mvdp.edc_management_client.models.data_service import DataService
from mvdp.edc_management_client.models.dataset import Dataset

class Catalog(BaseModel):
    """
    Catalog
    """
    contract_offers: Optional[conlist(ContractOffer)] = Field(None, alias="contractOffers")
    data_services: Optional[conlist(DataService)] = Field(None, alias="dataServices")
    datasets: Optional[conlist(Dataset)] = None
    id: Optional[StrictStr] = None
    properties: Optional[Dict[str, Dict[str, Any]]] = None
    __properties = ["contractOffers", "dataServices", "datasets", "id", "properties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Catalog:
        """Create an instance of Catalog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in contract_offers (list)
        _items = []
        if self.contract_offers:
            for _item in self.contract_offers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contractOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_services (list)
        _items = []
        if self.data_services:
            for _item in self.data_services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item in self.datasets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Catalog:
        """Create an instance of Catalog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Catalog.parse_obj(obj)

        _obj = Catalog.parse_obj({
            "contract_offers": [ContractOffer.from_dict(_item) for _item in obj.get("contractOffers")] if obj.get("contractOffers") is not None else None,
            "data_services": [DataService.from_dict(_item) for _item in obj.get("dataServices")] if obj.get("dataServices") is not None else None,
            "datasets": [Dataset.from_dict(_item) for _item in obj.get("datasets")] if obj.get("datasets") is not None else None,
            "id": obj.get("id"),
            "properties": obj.get("properties")
        })
        return _obj

