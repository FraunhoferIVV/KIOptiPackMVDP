# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from mvdp.edc_management_client.models.callback_address_dto import CallbackAddressDto
from mvdp.edc_management_client.models.data_address import DataAddress

class TransferRequestDto(BaseModel):
    """
    TransferRequestDto
    """
    asset_id: StrictStr = Field(..., alias="assetId")
    callback_addresses: Optional[conlist(CallbackAddressDto)] = Field(None, alias="callbackAddresses")
    connector_address: StrictStr = Field(..., alias="connectorAddress")
    connector_id: StrictStr = Field(..., alias="connectorId")
    contract_id: StrictStr = Field(..., alias="contractId")
    data_destination: DataAddress = Field(..., alias="dataDestination")
    id: Optional[StrictStr] = None
    managed_resources: Optional[StrictBool] = Field(None, alias="managedResources")
    private_properties: Optional[Dict[str, StrictStr]] = Field(None, alias="privateProperties")
    properties: Optional[Dict[str, StrictStr]] = None
    protocol: StrictStr = Field(...)
    __properties = ["assetId", "callbackAddresses", "connectorAddress", "connectorId", "contractId", "dataDestination", "id", "managedResources", "privateProperties", "properties", "protocol"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransferRequestDto:
        """Create an instance of TransferRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in callback_addresses (list)
        _items = []
        if self.callback_addresses:
            for _item in self.callback_addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['callbackAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_destination
        if self.data_destination:
            _dict['dataDestination'] = self.data_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransferRequestDto:
        """Create an instance of TransferRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransferRequestDto.parse_obj(obj)

        _obj = TransferRequestDto.parse_obj({
            "asset_id": obj.get("assetId"),
            "callback_addresses": [CallbackAddressDto.from_dict(_item) for _item in obj.get("callbackAddresses")] if obj.get("callbackAddresses") is not None else None,
            "connector_address": obj.get("connectorAddress"),
            "connector_id": obj.get("connectorId"),
            "contract_id": obj.get("contractId"),
            "data_destination": DataAddress.from_dict(obj.get("dataDestination")) if obj.get("dataDestination") is not None else None,
            "id": obj.get("id"),
            "managed_resources": obj.get("managedResources"),
            "private_properties": obj.get("privateProperties"),
            "properties": obj.get("properties"),
            "protocol": obj.get("protocol")
        })
        return _obj

