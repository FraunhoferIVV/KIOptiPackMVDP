# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Policy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'assignee': 'str',
        'assigner': 'str',
        'extensible_properties': 'dict(str, object)',
        'inherits_from': 'str',
        'obligations': 'list[Duty]',
        'permissions': 'list[Permission]',
        'prohibitions': 'list[Prohibition]',
        'target': 'str'
    }

    attribute_map = {
        'type': '@type',
        'assignee': 'assignee',
        'assigner': 'assigner',
        'extensible_properties': 'extensibleProperties',
        'inherits_from': 'inheritsFrom',
        'obligations': 'obligations',
        'permissions': 'permissions',
        'prohibitions': 'prohibitions',
        'target': 'target'
    }

    def __init__(self, type=None, assignee=None, assigner=None, extensible_properties=None, inherits_from=None,
                 obligations=None, permissions=None, prohibitions=None, target=None):  # noqa: E501
        """Policy - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._assignee = None
        self._assigner = None
        self._extensible_properties = None
        self._inherits_from = None
        self._obligations = None
        self._permissions = None
        self._prohibitions = None
        self._target = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if assignee is not None:
            self.assignee = assignee
        if assigner is not None:
            self.assigner = assigner
        if extensible_properties is not None:
            self.extensible_properties = extensible_properties
        if inherits_from is not None:
            self.inherits_from = inherits_from
        if obligations is not None:
            self.obligations = obligations
        if permissions is not None:
            self.permissions = permissions
        if prohibitions is not None:
            self.prohibitions = prohibitions
        if target is not None:
            self.target = target

    @property
    def type(self):
        """Gets the type of this Policy.  # noqa: E501


        :return: The type of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Policy.


        :param type: The type of this Policy.  # noqa: E501
        :type: str
        """
        allowed_values = ["SET", "OFFER", "CONTRACT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def assignee(self):
        """Gets the assignee of this Policy.  # noqa: E501


        :return: The assignee of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Policy.


        :param assignee: The assignee of this Policy.  # noqa: E501
        :type: str
        """

        self._assignee = assignee

    @property
    def assigner(self):
        """Gets the assigner of this Policy.  # noqa: E501


        :return: The assigner of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this Policy.


        :param assigner: The assigner of this Policy.  # noqa: E501
        :type: str
        """

        self._assigner = assigner

    @property
    def extensible_properties(self):
        """Gets the extensible_properties of this Policy.  # noqa: E501


        :return: The extensible_properties of this Policy.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extensible_properties

    @extensible_properties.setter
    def extensible_properties(self, extensible_properties):
        """Sets the extensible_properties of this Policy.


        :param extensible_properties: The extensible_properties of this Policy.  # noqa: E501
        :type: dict(str, object)
        """

        self._extensible_properties = extensible_properties

    @property
    def inherits_from(self):
        """Gets the inherits_from of this Policy.  # noqa: E501


        :return: The inherits_from of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._inherits_from

    @inherits_from.setter
    def inherits_from(self, inherits_from):
        """Sets the inherits_from of this Policy.


        :param inherits_from: The inherits_from of this Policy.  # noqa: E501
        :type: str
        """

        self._inherits_from = inherits_from

    @property
    def obligations(self):
        """Gets the obligations of this Policy.  # noqa: E501


        :return: The obligations of this Policy.  # noqa: E501
        :rtype: list[Duty]
        """
        return self._obligations

    @obligations.setter
    def obligations(self, obligations):
        """Sets the obligations of this Policy.


        :param obligations: The obligations of this Policy.  # noqa: E501
        :type: list[Duty]
        """

        self._obligations = obligations

    @property
    def permissions(self):
        """Gets the permissions of this Policy.  # noqa: E501


        :return: The permissions of this Policy.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Policy.


        :param permissions: The permissions of this Policy.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    @property
    def prohibitions(self):
        """Gets the prohibitions of this Policy.  # noqa: E501


        :return: The prohibitions of this Policy.  # noqa: E501
        :rtype: list[Prohibition]
        """
        return self._prohibitions

    @prohibitions.setter
    def prohibitions(self, prohibitions):
        """Sets the prohibitions of this Policy.


        :param prohibitions: The prohibitions of this Policy.  # noqa: E501
        :type: list[Prohibition]
        """

        self._prohibitions = prohibitions

    @property
    def target(self):
        """Gets the target of this Policy.  # noqa: E501


        :return: The target of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Policy.


        :param target: The target of this Policy.  # noqa: E501
        :type: str
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Policy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
