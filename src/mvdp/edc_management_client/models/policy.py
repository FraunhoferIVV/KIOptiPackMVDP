# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from mvdp.edc_management_client.models.duty import Duty
from mvdp.edc_management_client.models.permission import Permission
from mvdp.edc_management_client.models.prohibition import Prohibition

class Policy(BaseModel):
    """
    Policy
    """
    type: Optional[StrictStr] = Field(None, alias="@type")
    assignee: Optional[StrictStr] = None
    assigner: Optional[StrictStr] = None
    extensible_properties: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="extensibleProperties")
    inherits_from: Optional[StrictStr] = Field(None, alias="inheritsFrom")
    obligations: Optional[conlist(Duty)] = None
    permissions: Optional[conlist(Permission)] = None
    prohibitions: Optional[conlist(Prohibition)] = None
    target: Optional[StrictStr] = None
    __properties = ["@type", "assignee", "assigner", "extensibleProperties", "inheritsFrom", "obligations", "permissions", "prohibitions", "target"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SET', 'OFFER', 'CONTRACT'):
            raise ValueError("must be one of enum values ('SET', 'OFFER', 'CONTRACT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Policy:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in obligations (list)
        _items = []
        if self.obligations:
            for _item in self.obligations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['obligations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item in self.permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prohibitions (list)
        _items = []
        if self.prohibitions:
            for _item in self.prohibitions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prohibitions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Policy:
        """Create an instance of Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Policy.parse_obj(obj)

        _obj = Policy.parse_obj({
            "type": obj.get("@type"),
            "assignee": obj.get("assignee"),
            "assigner": obj.get("assigner"),
            "extensible_properties": obj.get("extensibleProperties"),
            "inherits_from": obj.get("inheritsFrom"),
            "obligations": [Duty.from_dict(_item) for _item in obj.get("obligations")] if obj.get("obligations") is not None else None,
            "permissions": [Permission.from_dict(_item) for _item in obj.get("permissions")] if obj.get("permissions") is not None else None,
            "prohibitions": [Prohibition.from_dict(_item) for _item in obj.get("prohibitions")] if obj.get("prohibitions") is not None else None,
            "target": obj.get("target")
        })
        return _obj

