# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from mvdp.edc_management_client.models.data_address import DataAddress

class SelectionRequest(BaseModel):
    """
    SelectionRequest
    """
    destination: Optional[DataAddress] = None
    source: Optional[DataAddress] = None
    strategy: Optional[StrictStr] = None
    __properties = ["destination", "source", "strategy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SelectionRequest:
        """Create an instance of SelectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SelectionRequest:
        """Create an instance of SelectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SelectionRequest.parse_obj(obj)

        _obj = SelectionRequest.parse_obj({
            "destination": DataAddress.from_dict(obj.get("destination")) if obj.get("destination") is not None else None,
            "source": DataAddress.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "strategy": obj.get("strategy")
        })
        return _obj

