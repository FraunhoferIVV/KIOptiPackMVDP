# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HealthStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component_results': 'list[HealthCheckResult]',
        'is_system_healthy': 'bool'
    }

    attribute_map = {
        'component_results': 'componentResults',
        'is_system_healthy': 'isSystemHealthy'
    }

    def __init__(self, component_results=None, is_system_healthy=None):  # noqa: E501
        """HealthStatus - a model defined in Swagger"""  # noqa: E501
        self._component_results = None
        self._is_system_healthy = None
        self.discriminator = None
        if component_results is not None:
            self.component_results = component_results
        if is_system_healthy is not None:
            self.is_system_healthy = is_system_healthy

    @property
    def component_results(self):
        """Gets the component_results of this HealthStatus.  # noqa: E501


        :return: The component_results of this HealthStatus.  # noqa: E501
        :rtype: list[HealthCheckResult]
        """
        return self._component_results

    @component_results.setter
    def component_results(self, component_results):
        """Sets the component_results of this HealthStatus.


        :param component_results: The component_results of this HealthStatus.  # noqa: E501
        :type: list[HealthCheckResult]
        """

        self._component_results = component_results

    @property
    def is_system_healthy(self):
        """Gets the is_system_healthy of this HealthStatus.  # noqa: E501


        :return: The is_system_healthy of this HealthStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_healthy

    @is_system_healthy.setter
    def is_system_healthy(self, is_system_healthy):
        """Sets the is_system_healthy of this HealthStatus.


        :param is_system_healthy: The is_system_healthy of this HealthStatus.  # noqa: E501
        :type: bool
        """

        self._is_system_healthy = is_system_healthy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
