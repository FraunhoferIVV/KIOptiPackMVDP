# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NegotiationInitiateRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connector_address': 'str',
        'connector_id': 'str',
        'offer': 'ContractOfferDescription',
        'protocol': 'str'
    }

    attribute_map = {
        'connector_address': 'connectorAddress',
        'connector_id': 'connectorId',
        'offer': 'offer',
        'protocol': 'protocol'
    }

    def __init__(self, connector_address=None, connector_id=None, offer=None, protocol=None):  # noqa: E501
        """NegotiationInitiateRequestDto - a model defined in Swagger"""  # noqa: E501
        self._connector_address = None
        self._connector_id = None
        self._offer = None
        self._protocol = None
        self.discriminator = None
        self.connector_address = connector_address
        self.connector_id = connector_id
        self.offer = offer
        self.protocol = protocol

    @property
    def connector_address(self):
        """Gets the connector_address of this NegotiationInitiateRequestDto.  # noqa: E501


        :return: The connector_address of this NegotiationInitiateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_address

    @connector_address.setter
    def connector_address(self, connector_address):
        """Sets the connector_address of this NegotiationInitiateRequestDto.


        :param connector_address: The connector_address of this NegotiationInitiateRequestDto.  # noqa: E501
        :type: str
        """
        if connector_address is None:
            raise ValueError("Invalid value for `connector_address`, must not be `None`")  # noqa: E501

        self._connector_address = connector_address

    @property
    def connector_id(self):
        """Gets the connector_id of this NegotiationInitiateRequestDto.  # noqa: E501


        :return: The connector_id of this NegotiationInitiateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this NegotiationInitiateRequestDto.


        :param connector_id: The connector_id of this NegotiationInitiateRequestDto.  # noqa: E501
        :type: str
        """
        if connector_id is None:
            raise ValueError("Invalid value for `connector_id`, must not be `None`")  # noqa: E501

        self._connector_id = connector_id

    @property
    def offer(self):
        """Gets the offer of this NegotiationInitiateRequestDto.  # noqa: E501


        :return: The offer of this NegotiationInitiateRequestDto.  # noqa: E501
        :rtype: ContractOfferDescription
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this NegotiationInitiateRequestDto.


        :param offer: The offer of this NegotiationInitiateRequestDto.  # noqa: E501
        :type: ContractOfferDescription
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")  # noqa: E501

        self._offer = offer

    @property
    def protocol(self):
        """Gets the protocol of this NegotiationInitiateRequestDto.  # noqa: E501


        :return: The protocol of this NegotiationInitiateRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NegotiationInitiateRequestDto.


        :param protocol: The protocol of this NegotiationInitiateRequestDto.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NegotiationInitiateRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NegotiationInitiateRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
