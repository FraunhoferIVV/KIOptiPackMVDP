# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from mvdp.edc_management_client.models.action import Action
from mvdp.edc_management_client.models.constraint import Constraint

class Prohibition(BaseModel):
    """
    Prohibition
    """
    action: Optional[Action] = None
    assignee: Optional[StrictStr] = None
    assigner: Optional[StrictStr] = None
    constraints: Optional[conlist(Constraint)] = None
    target: Optional[StrictStr] = None
    __properties = ["action", "assignee", "assigner", "constraints", "target"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Prohibition:
        """Create an instance of Prohibition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item in self.constraints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constraints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Prohibition:
        """Create an instance of Prohibition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Prohibition.parse_obj(obj)

        _obj = Prohibition.parse_obj({
            "action": Action.from_dict(obj.get("action")) if obj.get("action") is not None else None,
            "assignee": obj.get("assignee"),
            "assigner": obj.get("assigner"),
            "constraints": [Constraint.from_dict(_item) for _item in obj.get("constraints")] if obj.get("constraints") is not None else None,
            "target": obj.get("target")
        })
        return _obj

