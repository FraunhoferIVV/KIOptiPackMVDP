# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Prohibition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'Action',
        'assignee': 'str',
        'assigner': 'str',
        'constraints': 'list[Constraint]',
        'target': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'action': 'action',
        'assignee': 'assignee',
        'assigner': 'assigner',
        'constraints': 'constraints',
        'target': 'target',
        'uid': 'uid'
    }

    def __init__(self, action=None, assignee=None, assigner=None, constraints=None, target=None,
                 uid=None):  # noqa: E501
        """Prohibition - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._assignee = None
        self._assigner = None
        self._constraints = None
        self._target = None
        self._uid = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if assignee is not None:
            self.assignee = assignee
        if assigner is not None:
            self.assigner = assigner
        if constraints is not None:
            self.constraints = constraints
        if target is not None:
            self.target = target
        if uid is not None:
            self.uid = uid

    @property
    def action(self):
        """Gets the action of this Prohibition.  # noqa: E501


        :return: The action of this Prohibition.  # noqa: E501
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Prohibition.


        :param action: The action of this Prohibition.  # noqa: E501
        :type: Action
        """

        self._action = action

    @property
    def assignee(self):
        """Gets the assignee of this Prohibition.  # noqa: E501


        :return: The assignee of this Prohibition.  # noqa: E501
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Prohibition.


        :param assignee: The assignee of this Prohibition.  # noqa: E501
        :type: str
        """

        self._assignee = assignee

    @property
    def assigner(self):
        """Gets the assigner of this Prohibition.  # noqa: E501


        :return: The assigner of this Prohibition.  # noqa: E501
        :rtype: str
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this Prohibition.


        :param assigner: The assigner of this Prohibition.  # noqa: E501
        :type: str
        """

        self._assigner = assigner

    @property
    def constraints(self):
        """Gets the constraints of this Prohibition.  # noqa: E501


        :return: The constraints of this Prohibition.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this Prohibition.


        :param constraints: The constraints of this Prohibition.  # noqa: E501
        :type: list[Constraint]
        """

        self._constraints = constraints

    @property
    def target(self):
        """Gets the target of this Prohibition.  # noqa: E501


        :return: The target of this Prohibition.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Prohibition.


        :param target: The target of this Prohibition.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def uid(self):
        """Gets the uid of this Prohibition.  # noqa: E501


        :return: The uid of this Prohibition.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Prohibition.


        :param uid: The uid of this Prohibition.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Prohibition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Prohibition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
