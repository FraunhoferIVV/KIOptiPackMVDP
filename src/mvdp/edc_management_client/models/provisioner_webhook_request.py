# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from mvdp.edc_management_client.models.data_address import DataAddress

class ProvisionerWebhookRequest(BaseModel):
    """
    ProvisionerWebhookRequest
    """
    api_key_jwt: StrictStr = Field(..., alias="apiKeyJwt")
    asset_id: StrictStr = Field(..., alias="assetId")
    content_data_address: DataAddress = Field(..., alias="contentDataAddress")
    has_token: Optional[StrictBool] = Field(None, alias="hasToken")
    resource_definition_id: StrictStr = Field(..., alias="resourceDefinitionId")
    resource_name: StrictStr = Field(..., alias="resourceName")
    __properties = ["apiKeyJwt", "assetId", "contentDataAddress", "hasToken", "resourceDefinitionId", "resourceName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProvisionerWebhookRequest:
        """Create an instance of ProvisionerWebhookRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content_data_address
        if self.content_data_address:
            _dict['contentDataAddress'] = self.content_data_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProvisionerWebhookRequest:
        """Create an instance of ProvisionerWebhookRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProvisionerWebhookRequest.parse_obj(obj)

        _obj = ProvisionerWebhookRequest.parse_obj({
            "api_key_jwt": obj.get("apiKeyJwt"),
            "asset_id": obj.get("assetId"),
            "content_data_address": DataAddress.from_dict(obj.get("contentDataAddress")) if obj.get("contentDataAddress") is not None else None,
            "has_token": obj.get("hasToken"),
            "resource_definition_id": obj.get("resourceDefinitionId"),
            "resource_name": obj.get("resourceName")
        })
        return _obj

