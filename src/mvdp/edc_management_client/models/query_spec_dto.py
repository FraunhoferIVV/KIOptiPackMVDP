# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from mvdp.edc_management_client.models.criterion_dto import CriterionDto

class QuerySpecDto(BaseModel):
    """
    QuerySpecDto
    """
    context: Optional[Dict[str, Any]] = Field(None, alias="@context")
    type: Optional[StrictStr] = Field(None, alias="@type")
    filter_expression: Optional[conlist(CriterionDto)] = Field(None, alias="filterExpression")
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    sort_field: Optional[StrictStr] = Field(None, alias="sortField")
    sort_order: Optional[StrictStr] = Field(None, alias="sortOrder")
    __properties = ["@context", "@type", "filterExpression", "limit", "offset", "sortField", "sortOrder"]

    @validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ASC', 'DESC'):
            raise ValueError("must be one of enum values ('ASC', 'DESC')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QuerySpecDto:
        """Create an instance of QuerySpecDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in filter_expression (list)
        _items = []
        if self.filter_expression:
            for _item in self.filter_expression:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filterExpression'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QuerySpecDto:
        """Create an instance of QuerySpecDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QuerySpecDto.parse_obj(obj)

        _obj = QuerySpecDto.parse_obj({
            "context": obj.get("@context"),
            "type": obj.get("@type"),
            "filter_expression": [CriterionDto.from_dict(_item) for _item in obj.get("filterExpression")] if obj.get("filterExpression") is not None else None,
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "sort_field": obj.get("sortField"),
            "sort_order": obj.get("sortOrder")
        })
        return _obj

