# coding: utf-8

"""
    management-api

    REST API documentation for the management-api  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContractDefinitionCreateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_policy_id': 'str',
        'contract_policy_id': 'str',
        'criteria': 'list[CriterionDto]',
        'id': 'str',
        'validity': 'int'
    }

    attribute_map = {
        'access_policy_id': 'accessPolicyId',
        'contract_policy_id': 'contractPolicyId',
        'criteria': 'criteria',
        'id': 'id',
        'validity': 'validity'
    }

    def __init__(self, access_policy_id=None, contract_policy_id=None, criteria=None, id=None,
                 validity=None):  # noqa: E501
        """ContractDefinitionCreateDto - a model defined in Swagger"""  # noqa: E501
        self._access_policy_id = None
        self._contract_policy_id = None
        self._criteria = None
        self._id = None
        self._validity = None
        self.discriminator = None
        self.access_policy_id = access_policy_id
        self.contract_policy_id = contract_policy_id
        self.criteria = criteria
        if id is not None:
            self.id = id
        if validity is not None:
            self.validity = validity

    @property
    def access_policy_id(self):
        """Gets the access_policy_id of this ContractDefinitionCreateDto.  # noqa: E501


        :return: The access_policy_id of this ContractDefinitionCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._access_policy_id

    @access_policy_id.setter
    def access_policy_id(self, access_policy_id):
        """Sets the access_policy_id of this ContractDefinitionCreateDto.


        :param access_policy_id: The access_policy_id of this ContractDefinitionCreateDto.  # noqa: E501
        :type: str
        """
        if access_policy_id is None:
            raise ValueError("Invalid value for `access_policy_id`, must not be `None`")  # noqa: E501

        self._access_policy_id = access_policy_id

    @property
    def contract_policy_id(self):
        """Gets the contract_policy_id of this ContractDefinitionCreateDto.  # noqa: E501


        :return: The contract_policy_id of this ContractDefinitionCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._contract_policy_id

    @contract_policy_id.setter
    def contract_policy_id(self, contract_policy_id):
        """Sets the contract_policy_id of this ContractDefinitionCreateDto.


        :param contract_policy_id: The contract_policy_id of this ContractDefinitionCreateDto.  # noqa: E501
        :type: str
        """
        if contract_policy_id is None:
            raise ValueError("Invalid value for `contract_policy_id`, must not be `None`")  # noqa: E501

        self._contract_policy_id = contract_policy_id

    @property
    def criteria(self):
        """Gets the criteria of this ContractDefinitionCreateDto.  # noqa: E501


        :return: The criteria of this ContractDefinitionCreateDto.  # noqa: E501
        :rtype: list[CriterionDto]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this ContractDefinitionCreateDto.


        :param criteria: The criteria of this ContractDefinitionCreateDto.  # noqa: E501
        :type: list[CriterionDto]
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")  # noqa: E501

        self._criteria = criteria

    @property
    def id(self):
        """Gets the id of this ContractDefinitionCreateDto.  # noqa: E501


        :return: The id of this ContractDefinitionCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractDefinitionCreateDto.


        :param id: The id of this ContractDefinitionCreateDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def validity(self):
        """Gets the validity of this ContractDefinitionCreateDto.  # noqa: E501


        :return: The validity of this ContractDefinitionCreateDto.  # noqa: E501
        :rtype: int
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this ContractDefinitionCreateDto.


        :param validity: The validity of this ContractDefinitionCreateDto.  # noqa: E501
        :type: int
        """

        self._validity = validity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractDefinitionCreateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractDefinitionCreateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
