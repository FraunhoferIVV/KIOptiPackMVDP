# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class CallbackAddress(BaseModel):
    """
    CallbackAddress
    """
    auth_code_id: Optional[StrictStr] = Field(None, alias="authCodeId")
    auth_key: Optional[StrictStr] = Field(None, alias="authKey")
    events: Optional[conlist(StrictStr, unique_items=True)] = None
    transactional: Optional[StrictBool] = None
    uri: Optional[StrictStr] = None
    __properties = ["authCodeId", "authKey", "events", "transactional", "uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CallbackAddress:
        """Create an instance of CallbackAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CallbackAddress:
        """Create an instance of CallbackAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CallbackAddress.parse_obj(obj)

        _obj = CallbackAddress.parse_obj({
            "auth_code_id": obj.get("authCodeId"),
            "auth_key": obj.get("authKey"),
            "events": obj.get("events"),
            "transactional": obj.get("transactional"),
            "uri": obj.get("uri")
        })
        return _obj

