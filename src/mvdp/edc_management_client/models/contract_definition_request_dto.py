# coding: utf-8

"""
    EDC REST API

    EDC REST APIs - merged by OpenApiMerger  # noqa: E501

    The version of the OpenAPI document: 0.1.0-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from mvdp.edc_management_client.models.criterion_dto import CriterionDto

class ContractDefinitionRequestDto(BaseModel):
    """
    ContractDefinitionRequestDto
    """
    context: Optional[Dict[str, Any]] = Field(None, alias="@context")
    id: Optional[StrictStr] = Field(None, alias="@id")
    type: Optional[StrictStr] = Field(None, alias="@type")
    access_policy_id: StrictStr = Field(..., alias="accessPolicyId")
    assets_selector: conlist(CriterionDto) = Field(..., alias="assetsSelector")
    contract_policy_id: StrictStr = Field(..., alias="contractPolicyId")
    __properties = ["@context", "@id", "@type", "accessPolicyId", "assetsSelector", "contractPolicyId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContractDefinitionRequestDto:
        """Create an instance of ContractDefinitionRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in assets_selector (list)
        _items = []
        if self.assets_selector:
            for _item in self.assets_selector:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assetsSelector'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContractDefinitionRequestDto:
        """Create an instance of ContractDefinitionRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContractDefinitionRequestDto.parse_obj(obj)

        _obj = ContractDefinitionRequestDto.parse_obj({
            "context": obj.get("@context"),
            "id": obj.get("@id"),
            "type": obj.get("@type"),
            "access_policy_id": obj.get("accessPolicyId"),
            "assets_selector": [CriterionDto.from_dict(_item) for _item in obj.get("assetsSelector")] if obj.get("assetsSelector") is not None else None,
            "contract_policy_id": obj.get("contractPolicyId")
        })
        return _obj

